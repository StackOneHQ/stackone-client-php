<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace StackOne\client;



/** StackOne - Accounting: The documentation for the StackOne Unified API - ACCOUNTING */
class StackOne
{
    public const SERVERS = [
        'https://api.stackone.com',
    ];

    /**
     * Generate connection session tokens or auth URLs to allow your customers to connect their accounts.
     *
     * @var ConnectSessions $$connectSessions
     */
    public ConnectSessions $connectSessions;

    /**
     * Chart of accounts.
     *
     * @var Accounts $$accounts
     */
    public Accounts $accounts;

    /**
     * API requests and response logs.
     *
     * @var RequestLogs $$requestLogs
     */
    public RequestLogs $requestLogs;

    /**
     * Retrieve metadata for connectors.
     *
     * @var Connectors $$connectors
     */
    public Connectors $connectors;

    /**
     * Routing API requests through StackOne directly to the underlying provider.
     *
     * @var Proxy $$proxy
     */
    public Proxy $proxy;

    /**
     * Model Context Protocol endpoint.
     *
     * @var Mcp $$mcp
     */
    public Mcp $mcp;

    /**
     * Retrieve Actions metadata and definitions.
     *
     * @var Actions $$actions
     */
    public Actions $actions;

    public Hris $hris;

    public Ats $ats;

    public Lms $lms;

    public Iam $iam;

    public Crm $crm;

    public Marketing $marketing;

    public Ticketing $ticketing;

    public Documents $documents;

    public Screening $screening;

    public Messaging $messaging;

    public Accounting $accounting;

    /**
     * Returns a new instance of the SDK builder used to configure and create the SDK instance.
     *
     * @return StackOneBuilder
     */
    public static function builder(): StackOneBuilder
    {
        return new StackOneBuilder();
    }

    /**
     * @param  SDKConfiguration  $sdkConfiguration
     */
    public function __construct(
        public SDKConfiguration $sdkConfiguration,
    ) {
        $this->connectSessions = new ConnectSessions($this->sdkConfiguration);
        $this->accounts = new Accounts($this->sdkConfiguration);
        $this->requestLogs = new RequestLogs($this->sdkConfiguration);
        $this->connectors = new Connectors($this->sdkConfiguration);
        $this->proxy = new Proxy($this->sdkConfiguration);
        $this->mcp = new Mcp($this->sdkConfiguration);
        $this->actions = new Actions($this->sdkConfiguration);
        $this->hris = new Hris($this->sdkConfiguration);
        $this->ats = new Ats($this->sdkConfiguration);
        $this->lms = new Lms($this->sdkConfiguration);
        $this->iam = new Iam($this->sdkConfiguration);
        $this->crm = new Crm($this->sdkConfiguration);
        $this->marketing = new Marketing($this->sdkConfiguration);
        $this->ticketing = new Ticketing($this->sdkConfiguration);
        $this->documents = new Documents($this->sdkConfiguration);
        $this->screening = new Screening($this->sdkConfiguration);
        $this->messaging = new Messaging($this->sdkConfiguration);
        $this->accounting = new Accounting($this->sdkConfiguration);
        $this->initHooks();

    }

    private function initHooks(): void
    {
        $preHooksUrl = $this->sdkConfiguration->getTemplatedServerUrl();
        $ret = $this->sdkConfiguration->hooks->sdkInit($preHooksUrl, $this->sdkConfiguration->client);
        if ($preHooksUrl != $ret->url) {
            $this->sdkConfiguration->serverUrl = $ret->url;
        }
        $this->sdkConfiguration->client = $ret->client;
    }
}
<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace StackOne\client\Models\Components;


class JournalLine
{
    /**
     * Unique identifier for the journal line
     *
     * @var ?string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $id = null;

    /**
     * ID of the ledger account this line references
     *
     * @var ?string $accountId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('account_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $accountId = null;

    /**
     * Type of the account
     *
     * @var ?AccountType $accountType
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('account_type')]
    #[\Speakeasy\Serializer\Annotation\Type('\StackOne\client\Models\Components\AccountType|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?AccountType $accountType = null;

    /**
     * Description of the journal line
     *
     * @var ?string $description
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('description')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $description = null;

    /**
     * Currency code for this line
     *
     * @var ?JournalLineCurrencyCode $currencyCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('currency_code')]
    #[\Speakeasy\Serializer\Annotation\Type('\StackOne\client\Models\Components\JournalLineCurrencyCode|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?JournalLineCurrencyCode $currencyCode = null;

    /**
     * Exchange rate to company base currency
     *
     * @var ?float $exchangeRate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('exchange_rate')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $exchangeRate = null;

    /**
     * Amount of the journal line in minor units, e.g. 10010 for 100.10 USD. Positive for debit, negative for credit
     *
     * @var ?float $amount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $amount = null;

    /**
     * Tax amount of the line in minor units, e.g. 10010 for 100.10 USD
     *
     * @var ?float $taxAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tax_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $taxAmount = null;

    /**
     * Tax rate percentage
     *
     * @var ?float $taxRatePercentage
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tax_rate_percentage')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $taxRatePercentage = null;

    /**
     * @param  ?string  $id
     * @param  ?string  $accountId
     * @param  ?AccountType  $accountType
     * @param  ?string  $description
     * @param  ?JournalLineCurrencyCode  $currencyCode
     * @param  ?float  $exchangeRate
     * @param  ?float  $amount
     * @param  ?float  $taxAmount
     * @param  ?float  $taxRatePercentage
     * @phpstan-pure
     */
    public function __construct(?string $id = null, ?string $accountId = null, ?AccountType $accountType = null, ?string $description = null, ?JournalLineCurrencyCode $currencyCode = null, ?float $exchangeRate = null, ?float $amount = null, ?float $taxAmount = null, ?float $taxRatePercentage = null)
    {
        $this->id = $id;
        $this->accountId = $accountId;
        $this->accountType = $accountType;
        $this->description = $description;
        $this->currencyCode = $currencyCode;
        $this->exchangeRate = $exchangeRate;
        $this->amount = $amount;
        $this->taxAmount = $taxAmount;
        $this->taxRatePercentage = $taxRatePercentage;
    }
}
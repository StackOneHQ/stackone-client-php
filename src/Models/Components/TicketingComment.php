<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace StackOne\client\Models\Components;


class TicketingComment
{
    /**
     * The ticket ID associated with the comment
     *
     * @var string $ticketId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('ticket_id')]
    public string $ticketId;

    /**
     * Unique identifier
     *
     * @var ?string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $id = null;

    /**
     * Provider's unique identifier
     *
     * @var ?string $remoteId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('remote_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $remoteId = null;

    /**
     * The user who created the comment
     *
     * @var ?string $userId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('user_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $userId = null;

    /**
     * Whether the comment is internal
     *
     * @var bool|TicketingCommentInternal2|null $internal
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('internal')]
    #[\Speakeasy\Serializer\Annotation\Type('bool|\StackOne\client\Models\Components\TicketingCommentInternal2|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public bool|TicketingCommentInternal2|null $internal = null;

    /**
     * Array of content associated with the comment
     *
     * @var ?array<TicketingContent> $content
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('content')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\StackOne\client\Models\Components\TicketingContent>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $content = null;

    /**
     * The timestamp when the record was created
     *
     * @var ?\DateTime $createdAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('created_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $createdAt = null;

    /**
     * The timestamp when the record was last updated
     *
     * @var ?\DateTime $updatedAt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('updated_at')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?\DateTime $updatedAt = null;

    /**
     * @param  string  $ticketId
     * @param  ?string  $id
     * @param  ?string  $remoteId
     * @param  ?string  $userId
     * @param  bool|TicketingCommentInternal2|null  $internal
     * @param  ?array<TicketingContent>  $content
     * @param  ?\DateTime  $createdAt
     * @param  ?\DateTime  $updatedAt
     * @phpstan-pure
     */
    public function __construct(string $ticketId, ?string $id = null, ?string $remoteId = null, ?string $userId = null, bool|TicketingCommentInternal2|null $internal = null, ?array $content = null, ?\DateTime $createdAt = null, ?\DateTime $updatedAt = null)
    {
        $this->ticketId = $ticketId;
        $this->id = $id;
        $this->remoteId = $remoteId;
        $this->userId = $userId;
        $this->internal = $internal;
        $this->content = $content;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
    }
}
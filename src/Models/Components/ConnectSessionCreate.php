<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace StackOne\client\Models\Components;


class ConnectSessionCreate
{
    /**
     * The categories of the provider to connect to
     *
     * @var ?array<Categories> $categories
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('categories')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\StackOne\client\Models\Components\Categories>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $categories = null;

    /**
     * The provider to connect to
     *
     * @var ?string $provider
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('provider')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $provider = null;

    /**
     * The origin owner identifier
     *
     * @var string $originOwnerId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('origin_owner_id')]
    public string $originOwnerId;

    /**
     * The origin owner name
     *
     * @var string $originOwnerName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('origin_owner_name')]
    public string $originOwnerName;

    /**
     * The origin username
     *
     * @var ?string $originUsername
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('origin_username')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $originUsername = null;

    /**
     * The unique identifier for the account associated with this connect session. When this field is present, the hub will launch in edit mode using the retrieved token.
     *
     * @var ?string $accountId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('account_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $accountId = null;

    /**
     * How long the session should be valid for in seconds
     *
     * @var ?float $expiresIn
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('expires_in')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $expiresIn = null;

    /**
     * The metadata for the connection
     *
     * @var ?Metadata $metadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('\StackOne\client\Models\Components\Metadata|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Metadata $metadata = null;

    /**
     * If set, this connect session will allow creation of multiple accounts with the same origin owner id and provider. Has no effect if account_id is set.
     *
     * @var ?bool $multiple
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('multiple')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $multiple = null;

    /**
     * The label to be applied to the account associated with this connect session.
     *
     * @var ?string $label
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('label')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $label = null;

    /**
     * @param  string  $originOwnerId
     * @param  string  $originOwnerName
     * @param  ?array<Categories>  $categories
     * @param  ?string  $provider
     * @param  ?string  $originUsername
     * @param  ?string  $accountId
     * @param  ?float  $expiresIn
     * @param  ?Metadata  $metadata
     * @param  ?bool  $multiple
     * @param  ?string  $label
     */
    public function __construct(string $originOwnerId, string $originOwnerName, ?array $categories = null, ?string $provider = null, ?string $originUsername = null, ?string $accountId = null, ?Metadata $metadata = null, ?string $label = null, ?float $expiresIn = 1800, ?bool $multiple = false)
    {
        $this->originOwnerId = $originOwnerId;
        $this->originOwnerName = $originOwnerName;
        $this->categories = $categories;
        $this->provider = $provider;
        $this->originUsername = $originUsername;
        $this->accountId = $accountId;
        $this->expiresIn = $expiresIn;
        $this->metadata = $metadata;
        $this->multiple = $multiple;
        $this->label = $label;
    }
}